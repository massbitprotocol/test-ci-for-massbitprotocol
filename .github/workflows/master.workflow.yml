name: CI for Master Branch

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # # Running compilation check
  # check:
  #   name: Check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  # # Running format check
  # fmt:
  #   name: Rustfmt
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - run: rustup component add rustfmt
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: fmt
  #         args: --all -- --check
  # Running test
  # test:
  #   name: Test
  #   env:
  #     PROJECT_NAME_UNDERSCORE: rust_ci_github_actions_workflow
  #     CARGO_INCREMENTAL: 0
  #     RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
  #     RUSTDOCFLAGS: -Cpanic=abort
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         override: true
  #     # - name: Cache dependencies
  #     #   uses: actions/cache@v2
  #     #   env:
  #     #     cache-name: cache-dependencies
  #     #   with:
  #     #     path: |
  #     #       ~/.cargo/.crates.toml
  #     #       ~/.cargo/.crates2.json
  #     #       ~/.cargo/bin
  #     #       ~/.cargo/registry/index
  #     #       ~/.cargo/registry/cache
  #     #       target
  #     #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
  #     - name: Generate test result and coverage report
  #       run: |
  #         cargo install cargo2junit grcov;
  #         cargo test $CARGO_OPTIONS -- -Z unstable-options --format json | cargo2junit > results.xml;
  #         zip -0 ccov.zip `find . \( -name "$PROJECT_NAME_UNDERSCORE*.gc*" \) -print`;
  #         grcov ccov.zip -s . -t lcov --llvm --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;
  #     # - name: Upload test results
  #     #   uses: EnricoMi/publish-unit-test-result-action@v1
  #     #   with:
  #     #     check_name: Test Results
  #     #     github_token: ${{ secrets.GITHUB_TOKEN }}
  #     #     files: results.xml
  #     # - name: Upload to CodeCov
  #     #   uses: codecov/codecov-action@v1
  #     #   with:
  #     #     # required for private repositories:
  #     #     # token: ${{ secrets.CODECOV_TOKEN }}
  #     #     files: ./lcov.info
  #     #     fail_ci_if_error: true

  # Running cargo build
  build:
    # needs: [check, fmt, test]
    name: Build
    env:
      PROJECT_NAME_UNDERSCORE: index-manager-main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install missing dependencies
        run: apt install -y cmake pkg-config libssl-dev git gcc build-essential clang libclang-dev libpq-dev 
      - name: Release Build
        run: cargo build --release
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME_UNDERSCORE }}
          path: target/release/${{ env.PROJECT_NAME_UNDERSCORE }}
  
  # Running docker
  docker:
    needs: [build] 
    name: Docker
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: my-docker-hub-namespace/my-docker-hub-repository
      
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./deployment/chain-reader
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

