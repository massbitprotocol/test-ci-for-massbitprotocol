mod mapping;
mod models;

{%- for chain_type in chain_types %}
use massbit_chain_{{ chain_type }}::data_type as {{ chain_type }}_types;
use adapter::{{ chain_type }}::*;
{%- endfor %}
use adapter::core::PluginRegistrar;
use index_store::core::Store;
use std::error::Error;
pub use index_store::{Entity, EntityFilter, EntityOrder, EntityRange, Value};
pub use index_store::{EntityValue, FromEntity, FromValueTrait, ToMap, ValueFrom};

#[doc(hidden)]
#[no_mangle]
pub static mut STORE: Option<&mut dyn Store> = None;

adapter::export_plugin!(register);

#[allow(dead_code, improper_ctypes_definitions)]
extern "C" fn register(registrar: &mut dyn PluginRegistrar) {
    {%- for chain_type in chain_types %}
    registrar.register_{{ chain_type }}_handler(Box::new({{ chain_type|title }}HandlerAdapter));
    {%- endfor %}
}

{%- for chain_type in chain_types %}

#[derive(Debug, Clone, PartialEq)]
pub struct {{ chain_type|title }}HandlerAdapter;

impl {{ chain_type|title }}Handler for {{ chain_type|title }}HandlerAdapter {
{%- for handler in handlers -%}
{%- if handler.kind == "solana/BlockHandler" and chain_type == "solana" %}
    fn handle_block(&self, block: &solana_types::SolanaBlock) -> Result<(), Box<dyn Error>> {
        mapping::{{ handler.name }}(block)
    }
{% elif handler.kind == "solana/TransactionHandler" and chain_type == "solana" %}
    fn handle_transaction(&self, transaction: &solana_types::SolanaTransaction) -> Result<(), Box<dyn Error>> {
        mapping::{{ handler.name }}(transaction)
    }
{% elif handler.kind == "solana/LogMessagesHandler" and chain_type == "solana" %}
    fn handle_log_messages(&self, log_messages: &solana_types::SolanaLogMessages) -> Result<(), Box<dyn Error>> {
        mapping::{{ handler.name }}(log_messages)
    }
{% elif handler.kind == "ethereum/BlockHandler" and chain_type == "ethereum" %}
    fn handle_block(&self, block: &ethereum_types::EthereumBlock) -> Result<(), Box<dyn Error>> {
        mapping::{{ handler.name }}(block)
    }
{% elif handler.kind == "ethereum/TransactionHandler" and chain_type == "ethereum" %}
    fn handle_transaction(&self, transaction: &ethereum_types::EthereumTransaction) -> Result<(), Box<dyn Error>> {
        mapping::{{ handler.name }}(transaction)
    }
{% elif handler.kind == "ethereum/EventHandler" and chain_type == "ethereum" %}
    fn handle_event(&self, event: &ethereum_types::EthereumEvent) -> Result<(), Box<dyn Error>> {
        mapping::{{ handler.name }}(event)
    }

{%- endif -%}

{% endfor %}
}
{%- endfor -%}